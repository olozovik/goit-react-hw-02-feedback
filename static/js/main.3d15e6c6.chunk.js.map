{"version":3,"sources":["components/Feedback/Buttons/Buttons.jsx","components/Feedback/Feedback.jsx","components/Statistics/Statistics.jsx","App.js","index.js"],"names":["Buttons","type","onClickHandler","onClick","Feedback","Statistics","getFeedbacksQuantity","countTotalFeedback","countPositiveFeedbackPercentage","App","state","good","neutral","bad","addFeedback","typeFeedback","setState","prevState","total","Math","round","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAAA,SAASA,EAAT,GAA4C,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,eACvB,OACE,gCACE,wBAAQD,KAAMA,EAAME,QAAS,kBAAMD,EAAe,SAAlD,kBAGA,wBAAQD,KAAMA,EAAME,QAAS,kBAAMD,EAAe,YAAlD,qBAGA,wBAAQD,KAAMA,EAAME,QAAS,kBAAMD,EAAe,QAAlD,oBCPN,SAASE,EAAT,GAAuC,IAAnBF,EAAkB,EAAlBA,eAClB,OACE,gCACE,uDACA,cAACF,EAAD,CAASC,KAAM,SAAUC,eAAgBA,OCN/C,SAASG,EAAT,GAII,IAHFC,EAGC,EAHDA,qBACAC,EAEC,EAFDA,mBACAC,EACC,EADDA,gCAEA,OACE,gCACE,4CACA,uCACQ,+BAAOF,EAAqB,aAEpC,0CACW,+BAAOA,EAAqB,gBAEvC,sCACO,+BAAOA,EAAqB,YAEnC,wCACS,+BAAOC,SAEfA,IAAuB,GACtB,oDACqB,iCAAOC,IAAP,a,IClBvBC,E,4MACJC,MAAQ,CACNC,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPC,YAAc,SAAAC,GACZ,EAAKC,UAAS,SAAAC,GAAS,sBACpBF,EAAeE,EAAUF,GAAgB,O,EAI9CT,qBAAuB,SAAAS,GACrB,OAAO,EAAKL,MAAMK,I,EAGpBR,mBAAqB,WACnB,OAAO,EAAKG,MAAMC,KAAO,EAAKD,MAAME,QAAU,EAAKF,MAAMG,K,EAG3DL,gCAAkC,WAChC,IAAMU,EAAQ,EAAKX,qBACbI,EAAO,EAAKD,MAAMC,KACxB,OAAOQ,KAAKC,MAAOT,EAAOO,EAAS,M,4CAGrC,WACE,OACE,qCACE,cAACd,EAAD,CAAUF,eAAgBmB,KAAKP,cAC/B,cAACT,EAAD,CACEC,qBAAsBe,KAAKf,qBAC3BC,mBAAoBc,KAAKd,mBACzBC,gCAAiCa,KAAKb,yC,GAlC9Bc,aCClBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.3d15e6c6.chunk.js","sourcesContent":["function Buttons({ type, onClickHandler }) {\n  return (\n    <div>\n      <button type={type} onClick={() => onClickHandler('good')}>\n        Good\n      </button>\n      <button type={type} onClick={() => onClickHandler('neutral')}>\n        Neutral\n      </button>\n      <button type={type} onClick={() => onClickHandler('bad')}>\n        Bad\n      </button>\n    </div>\n  );\n}\n\nexport { Buttons };\n","import { Buttons } from './Buttons/Buttons';\n\nfunction Feedback({ onClickHandler }) {\n  return (\n    <div>\n      <h2>Please leave feedback</h2>\n      <Buttons type={'button'} onClickHandler={onClickHandler} />\n    </div>\n  );\n}\n\nexport { Feedback };\n","function Statistics({\n  getFeedbacksQuantity,\n  countTotalFeedback,\n  countPositiveFeedbackPercentage,\n}) {\n  return (\n    <div>\n      <h2>Statistics</h2>\n      <p>\n        Good: <span>{getFeedbacksQuantity('good')}</span>\n      </p>\n      <p>\n        Neutral: <span>{getFeedbacksQuantity('neutral')}</span>\n      </p>\n      <p>\n        Bad: <span>{getFeedbacksQuantity('bad')}</span>\n      </p>\n      <p>\n        Total: <span>{countTotalFeedback()}</span>\n      </p>\n      {countTotalFeedback() > 0 && (\n        <p>\n          Positive feedback: <span>{countPositiveFeedbackPercentage()}%</span>\n        </p>\n      )}\n    </div>\n  );\n}\n\nexport { Statistics };\n","import React, { Component } from 'react';\nimport { Feedback } from './components/Feedback/Feedback';\nimport { Statistics } from './components/Statistics/Statistics';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  addFeedback = typeFeedback => {\n    this.setState(prevState => ({\n      [typeFeedback]: prevState[typeFeedback] + 1,\n    }));\n  };\n\n  getFeedbacksQuantity = typeFeedback => {\n    return this.state[typeFeedback];\n  };\n\n  countTotalFeedback = () => {\n    return this.state.good + this.state.neutral + this.state.bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const total = this.countTotalFeedback();\n    const good = this.state.good;\n    return Math.round((good / total) * 100);\n  };\n\n  render() {\n    return (\n      <>\n        <Feedback onClickHandler={this.addFeedback} />\n        <Statistics\n          getFeedbacksQuantity={this.getFeedbacksQuantity}\n          countTotalFeedback={this.countTotalFeedback}\n          countPositiveFeedbackPercentage={this.countPositiveFeedbackPercentage}\n        />\n      </>\n    );\n  }\n}\n\nexport { App };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}